module Foo where

import Prelude

import Conduit.Prelude

import Effect (log)
import Data.Functor (class Functor, map, void)
import Data.Either (Either())

import Data.List hiding (cons)
import Data.Maybe (Maybe(Just, Nothing), maybe)
import Prelude
  ( class Semiring
  , Ordering(EQ, GT, LT)
  , Void
  , compose
  , one
  , (&&)
  , (<<<)
  , (~>)
  )

import Data.Map
  ( singleton
  , empty
  ) as Data.Map
import Data.List as List
import Data.Maybe as Maybe
